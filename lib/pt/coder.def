	{ Semantic Operations }
	oTempAllocate = 14;
	oTempFree = 15;
	oOperandPushMode = 16; { (16) }
	oOperandChooseMode = 17; { >>16 }
	oOperandPushVariable = 18;
	oOperandPushInteger = 19;
	oOperandPushBoolean = 20;
	oOperandPushJumpCondition = 21; { (15) }
	oOperandChooseJumpCondition = 22; { >>15 }
	oOperandPushString = 23;
	oOperandPushProcedure = 24;
	oOperandPushTrap = 25;
	oOperandPushCaseLow = 26;
	oOperandPushCaseHigh = 27;
	oOperandPushArrayLowerBound = 28;
	oOperandPushArrayUpperBound = 29;
	oOperandPushCopy = 30;
	oOperandPushTemp = 31;
	oOperandSetMode = 32; { (16) }
	oOperandSetLength = 33; { (13) }
	oOperandSetRegnum = 34; { (13) }
	oOperandChooseLength = 35; { >>13 }
	oOperandSetValue = 36; { (13) }
	oOperandChooseValue = 37; { >>13 }
	oOperandChooseManifestValue = 38; { >>13 }
	oOperandIsValueNegative = 39; { >>14 }
	oOperandEnterValueFromCaseTableAddress = 40;
	oOperandEnterValueFromCodeAddress = 41;
	oOperandEnterValueFromStringLength = 42;
	oOperandEnterValueFromDataAreaSize = 43;
	oOperandCompareLeftAndRight = 44; { >>14 }
	oOperandCompareRightAndDest = 45; { >>14 }
	oOperandIsJumpCondition = 46; { >>14 }
	oOperandComplementJumpCondition = 47;
	oOperandAddManifestValues = 48;
	oOperandSubtractManifestValues = 49;
	oOperandMultiplyManifestValues = 50;
	oOperandNegateManifestValue = 51;
	oOperandCompareManifestValues = 52; { >>14 }
	oOperandMergeShuntsWithAddress = 53;
	oOperandMergeShunts = 54;
	oOperandFoldManifestSubscript = 55;
	oOperandSwap = 56;
	oOperandSwapRightAndDest = 57;
	oOperandSwapLeftAndDest = 58;
	oOperandPop = 59;
	oFixPushAddress = 60;
	oFixPushLastAddress = 61;
	oFixSwapAddresses = 62;
	oFixAndFreeShuntList = 63;
	oFixAndFreeFalseBranches = 64;
	oFixForwardBranch = 65;
	oFixPopAddress = 66;
	oEmitProcLabel = 67; { (16) }
	oEmitNone = 68; { (17) }
	oEmitSingle = 69; { (17) }
	oEmitDouble = 70; { (17) }
	oEmitString = 71;
	oEmitStringLength = 72;
	oEmitConditionalForwardBranch = 73;
	oEmitUnconditionalForwardBranch = 74;
	oEmitConditionalBackwardBranch = 75;
	oEmitUnconditionalBackwardBranch = 76;
	oEmitSourceCoordinate = 77;
	oEmitMergeSourceCoordinate = 78;
	oEmitCaseMergeBranch = 79;
	oEmitCaseBranchTable = 80;
	oCasePush = 81;
	oCasePop = 82;
	oCaseEnterTCodeAddress = 83;
	oCaseEnterVariantAddress = 84;
	oCaseEnterMergeAddress = 85;
	oCaseEnterAbortAddress = 86;
	oArrayEnterLowerBound = 87;
	oArrayEnterUpperBound = 88;
	oOptionTestChecking = 89; { >>14 }

	{ Input Tokens }
	tMultiply = 0;
	firstInputToken = 0;
	tDivide = 1;
	tModulus = 2;
	tAdd = 3;
	tSubtract = 4;
	tEQ = 5;
	tNE = 6;
	tGT = 7;
	tGE = 8;
	tLT = 9;
	tLE = 10;
	tAnd = 11;
	tInfixAnd = 12;
	tOr = 13;
	tInfixOr = 14;
	tNegate = 15;
	tNot = 16;
	tChr = 17;
	tOrd = 18;
	tEoln = 19;
	tEOF = 20;
	tVarParm = 21;
	tFetchAddress = 22;
	tFetchInteger = 23;
	tFetchBoolean = 24;
	tAssignBegin = 25;
	tAssignAddress = 26;
	tAssignInteger = 27;
	tAssignBoolean = 28;
	tStoreParmAddress = 29;
	tStoreParmInteger = 30;
	tStoreParmBoolean = 31;
	tSubscriptBegin = 32;
	tSubscriptAddress = 33;
	tSubscriptInteger = 34;
	tSubscriptBoolean = 35;
	tArrayDescriptor = 36;
	tFileDescriptor = 37;
	tIfBegin = 38;
	tIfEnd = 39;
	tCaseBegin = 40;
	tWhileBegin = 41;
	tRepeatBegin = 42;
	tRepeatControl = 43;
	tCallBegin = 44;
	tParmEnd = 45;
	tProcedureEnd = 46;
	tWriteBegin = 47;
	tReadBegin = 48;
	tTrapBegin = 49;
	tWriteEnd = 50;
	tReadEnd = 51;
	tFetchString = 52;
	tAssignString = 53;
	tStoreParmString = 54;
	tSubscriptString = 55;
	tConcatenate = 56;
	tSubstring = 57;
	tLength = 58;
	tStringEqual = 59;
	tLoopBegin = 60;
	tLoopBreakIf = 61;
	tCaseDefault = 62;
	tLiteralAddress = 63;
	firstCompoundToken = 63;
	tLiteralInteger = 64;
	tLiteralBoolean = 65;
	tLiteralString = 66;
	tStringDescriptor = 67;
	tSkipString = 68;
	tIfThen = 69;
	tIfMerge = 70;
	tCaseSelect = 71;
	tCaseMerge = 72;
	tCaseEnd = 73;
	tCaseElse = 74;
	tWhileTest = 75;
	tWhileEnd = 76;
	tRepeatTest = 77;
	tSkipProc = 78;
	tCallEnd = 79;
	tLineNumber = 80;
	tLoopTest = 81;
	tLoopEnd = 82;
	tTrap = 83;
	lastCompoundToken = 83;
	tEndOfFile = 84;
	lastInputToken = 84;

	{ Output Tokens }

	{ Input/Output Tokens }

	{ Error Codes }
	eDivisionByZero = 10;
	firstErrorCode = 10;
	lastSslErrorCode = 10;

	{ Type Values }
	{ Type 13 }
	minusOne = -1;
	zero = 0;
	null = 0;
	one = 1;
	two = 2;
	four = 4;
	eight = 8;
	twelve = 12;
	regAX = 1;
	regBX = 2;
	regCX = 3;
	regDX = 4;
	trHalt = 0;
	trReset = 1;
	trRewrite = 2;
	trRead = 3;
	trReadln = 4;
	trWrite = 5;
	trWriteln = 6;
	trWriteInteger = 8;
	trWriteString = 108;
	trReadInteger = 10;
	trReadString = 107;
	trAssign = 12;
	trSubscriptAbort = 13;
	trCaseAbort = 14;
	trEoln = 15;
	trEof = 16;
	trAssignString = 101;
	trChrString = 102;
	trConcatenate = 103;
	trSubstring = 104;
	trLength = 105;
	trStringEqual = 106;
	byte = 1;
	word = 2;
	string = 3;
	{ Type 14 }
	no = 0;
	yes = 1;
	{ Type 15 }
	iJalways = -9;
	iJhi = -8;
	iJlos = -7;
	iJge = -6;
	iJlt = -5;
	iJle = -4;
	iJgt = -3;
	iJne = -2;
	iJeq = -1;
	iJnever = 0;
	{ Type 16 }
	mStatic = 1;
	mStaticManifest = 2;
	mTemp = 3;
	mTempIndirect = 4;
	mTempIndirectCaseOffset = 5;
	mStackReg = 6;
	mStack = 7;
	mBaseReg = 8;
	mArgument = 9;
	mManifest = 10;
	mResultReg = 11;
	mRemainderReg = 12;
	mScratchReg1 = 13;
	mScratchReg2 = 14;
	mGlobalBase = 15;
	mLineNum = 16;
	mMainProc = 17;
	mProc = 18;
	mTrap = 19;
	mString = 20;
	mWord = 21;
	{ Type 17 }
	iAdd = 1;
	iCmp = 2;
	iDec = 3;
	iDiv = 4;
	iInc = 5;
	iMul = 6;
	iShl = 7;
	iNeg = 8;
	iSub = 9;
	iMov = 10;
	iPush = 11;
	iPop = 12;
	iLoada = 13;
	iExtend = 14;
	iJmp = 15;
	iCall = 16;
	iReturn = 17;
	iEnter = 18;
	iLeave = 19;
	iGlobl = 20;
	iText = 21;
	iData = 22;
	iWord = 23;
	iSpace = 24;

	{ S/SL Rule Table Addresses } {
	Program = 0;
	EmitProgramPrologue = 7;
	Block = 65;
	EmitProgramEpilogue = 58;
	OperandPopAndFreeTemp = 3311;
	Routine = 196;
	AssignStmt = 364;
	CallStmt = 372;
	IfStmt = 447;
	WhileStmt = 606;
	LoopStmt = 644;
	CaseStmt = 704;
	WriteProc = 848;
	ReadProc = 932;
	TrapStmt = 1023;
	OperandNextParameter = 287;
	EmitMove = 4009;
	Statements = 302;
	OperandPushVariable = 1322;
	OperandPushExpressionAssignPopPop = 1872;
	OperandPushExpression = 1141;
	OperandConvertJumpConditionToData = 3336;
	OperandForceAddressIntoTemp = 3682;
	OperandForceToStack = 3838;
	OperandPushBooleanControlExpression = 500;
	FoldIfStmt = 541;
	OperandInfixOr = 3250;
	OperandForceToJumpCondition = 505;
	EmitTst = 4043;
	SkipToEndIf = 587;
	SkipToEndWhile = 685;
	OperandFreeTemp = 3324;
	CaseSelect = 732;
	CaseVariant = 735;
	CaseEnd = 743;
	EmitDefaultCaseAbort = 753;
	EmitCaseSubscriptJump = 789;
	OperandForceIntoTemp = 3620;
	OperandSubtractRightFromLeftPop = 2351;
	WriteParameter = 863;
	ReadParameter = 947;
	OperandAssignIntegerPopPop = 3273;
	EmitStringDescriptor = 1319;
	OperandNegate = 2176;
	OperandAddPop = 2254;
	OperandSubtractPop = 2373;
	OperandMultiplyPop = 2524;
	OperandDividePop = 2670;
	OperandModPop = 2796;
	OperandNot = 3246;
	OperandOrPop = 3267;
	OperandEqualPop = 3429;
	OperandGreaterPop = 3504;
	OperandLessPop = 3592;
	OperandChr = 2906;
	OperandOrd = 2943;
	OperandEolnFunction = 2967;
	OperandEofFunction = 3093;
	OperandSubscriptIntegerPop = 1385;
	OperandSubscriptBooleanPop = 1446;
	OperandSubscriptNonManifestIntegerPop = 1449;
	OperandSubscriptCharPop = 1414;
	OperandSubscriptNonManifestCharPop = 1704;
	OperandCheckedSubscriptNonManifestIntegerPop = 1462;
	OperandUncheckedSubscriptNonManifestIntegerPop = 1631;
	OperandPushArrayUpperBound = 1591;
	EmitCmp = 3953;
	OperandPushArrayLowerBound = 1577;
	EmitSubscriptAbort = 1610;
	OperandCheckedSubscriptNonManifestCharPop = 1717;
	OperandUncheckedSubscriptNonManifestCharPop = 1819;
	OperandAssignBooleanPopPop = 3306;
	OperandNegateAssignPopPop = 2151;
	OperandAddAssignPopPopPop = 2191;
	OperandSubtractAssignPopPopPop = 2331;
	OperandMultiplyAssignPopPopPop = 2416;
	OperandDivideAssignPopPopPop = 2623;
	OperandNotAssignPopPop = 3155;
	OperandOrdAssignPopPop = 2912;
	OperandAddRightToLeftPop = 2224;
	EmitAdd = 3923;
	OperandForceLeftIntoTemp = 3668;
	EmitSub = 3938;
	OperandMultiplyLeftByRightPop = 2449;
	OperandDivideLeftByRightPop = 2643;
	SaveTempRegsToStack = 3029;
	RestoreTempRegsFromStack = 3061;
	OperandAssignCharPopPop = 3296;
	OperandPushFalseTemp = 3413;
	OperandPushTrueTemp = 3397;
	OperandPushTempByte = 3829;
	OperandFoldComparisonPopPop = 3596;
	OperandPushTempWord = 3820;
	OperandForceAddressIntoNewTemp = 3746;
	OperandAreLeftAndRightManifest = 3865; >>14
	OperandLeftOrRightIsTemp = 3894; >>14
	}

	{ S/SL Table Parameters }
	sslTblSize = 4078;
	minSslTableValue = -32767;
	maxSslTableValue = 32767;
